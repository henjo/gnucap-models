Release 2.5 5/1/01

- Time to put this tired workhorse out to public-domain pasture.
  Anyone who wants a "real" simulation tool should investigate
  WRspice - see www.wrcad.com.

- Portability check: this distribution is known to build on
  Solaris 7, FreeBSD 4.3, RH Linux 6.0.  It should build on about
  any unix-like platform, but a little tweeking may be required.

- Support in sced for true-color displays.

- MOS level 8 cryo-cmos model added.  This was developed by Luong
  Huynh at U. C. Berkeley as a masters project for Prof. T. Van
  Duzer in 1994-1995.  A master's thesis describing the work is
  available, probably from the same location as this Jspice3
  distribution.

- The "sfft" (superconducting flux-flow transistor) model has been
  removed, since the device does not appear to have technological
  importance.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
JSPICE3 (C) Stephen R. Whiteley 1990-1994
stevew@srware.com


README V2.4 12-18-94
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

See TROUBLE below if your target is a SparcStation.

Before you start, you should check and possibly edit the files
conf/unixconf/mkheader.0 (for UNIX) or conf/dosconf/mkheader.1 (for
DOS) as they contain user configurable options for fine-tuning your
installation.  For DOS, you will need the djgpp package 1.11m5 or
later, plus a few unix-like utilities such as mv, rm, cp, and GNU
make with UNIX-friendly extensions (available from S. Whiteley).

The CC_OPT_S variable is designed to apply maximum optimization
to the routines that need it.  It defaults to the standard -O,
unless changed.
FreeBSD 2.x                  "-O3 -m486" (on 486 or Pentium)
gcc 2.6 on sparc 5, 10, 20   "-O3 -msupersparc"
gcc 2.6 on sparc 1, 2, IPX   "-O3"
gcc 2.5                      "-O2"
See your compiler manual for others.

Under UNIX, the configuration script will set the compiler to gcc if
found.  This can be overridden by setting the environment variable CC
to the name of your compiler before the build.

To build the binaries, simply type "build" in the directory containing
this file.  Under UNIX, you will probably have to become root to
actually install the program.  The configuration script has a pretty
high IQ, so building the program should be automatic.  If this is not
so on your machine, the author would like to know about it.  A file
named "errs" will exist in this directory upon completion (UNIX only).
This will contain any compilation or linking errors, and should be
saved and sent to the author in case of trouble.

The build script takes the argument "make", which if given stops
the build process after generating the main makefile in src/bin.
You can complete the build and installation from this makefile,
if necessary.

You should only need to run the build script once, as it will
always attempt to build the complete distribution.  Once the
makefile in the bin directory is created, this can be used to
rebuild the binaries if fine tuning is necessary.  Go to the
bin directory and type "make" for a list of options.  In
particular, you can edit the conf/mkheader file and remake
all the other makefiles, without causing a recompilation of the
entire source tree (the header of the bin makefile should be
similarly changed).  User configurable options such as default
file locations are most quickly changed in this way.

TROUBLE:
*Sun 4.1.x Bug*  If you are using the Sun cc and openwin X libraries,
the link will fail unless you first issue the command
setenv LD_FLAGS -Bstatic
This is due to an error in the Sun X dynamically linked libraries.
You must issue the command before the link (or before typing "build").

The script has been checked with SunOS 4.1.3 and FreeBSD 2.0.  You
shouldn't have any problems with any BSD-like UNIX, but some off-
brands will fail.  In this case, you should build the makefiles,
then fine-tune them by hand, for example to alter the X include
string to access strange locations.  Some really stupid compilers
don't support the "cc -M" option to create dependency rules.  In
this case, you should indicate to your vendor that you have been
ripped off (you have!) and alter the bin makefile to remove the
dependency creation.  Then, in bin, type "make make" to create the
other makefiles, and build from bin (follow the procedure in the
build script).  Or, you can install gcc.  This all gets pretty
technical, so you may need to consult a UNIX guru.
